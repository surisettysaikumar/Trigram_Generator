package code;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Scanner;
import java.util.Set;
import java.util.Map.Entry;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * InputParser class parses a text file and extracts words from it to populate a
 * Map<String, ArrayList<String>>.
 * 
 * The trigram Map is generated by parsing each word in the text file and using
 * two adjacent words as key and adding the third word following them as a
 * value.
 * 
 * @author Sai Kumar Surisetty
 * 
 */
public class InputParser {

	private static final Logger LOGGER = Logger.getLogger(TrigramGenerator.class.getName());

	/**
	 * parses a .txt file to extract words from it and populates a List<String> with
	 * these extracted words.
	 * 
	 * @param fileName : text file to be parsed(FileName is in config.properties
	 *                 file).
	 * @return List<String>
	 * @throws IOException
	 */

	public final List<String> parseInputFile(String fileName) throws IOException {
		if (fileName == null || fileName.isEmpty()) {
			throw new NullPointerException("File name is Invalid");
		}
		Scanner fileSc = null;
		List<String> wordsList = null;
		Pattern pattern = Pattern.compile("[0-9]|\\p{Punct}+"); // regex to match numbers or punctuation
		Matcher matcher = pattern.matcher("");
		try {
			File file = new File(fileName);
			if (isInputFileValid(file)) {
				fileSc = new Scanner(file);
				wordsList = new ArrayList<String>();
				while (fileSc.hasNextLine()) {
					String line = fileSc.nextLine().trim();
					matcher = matcher.reset(line);
					line = matcher.replaceAll(" ");
					String[] words = line.split("\\s+");
					for (String word : words) {
						if (!word.isEmpty()) {
							wordsList.add(word);
						}
					}
				}
				if (fileSc.ioException() != null) {
					throw fileSc.ioException();
				}

			} else {
				throw new IllegalArgumentException("File '" + fileName + "' is not a valid text file");
			}
		} catch (FileNotFoundException fnf) {
			throw new IllegalArgumentException("File '" + fileName + "' does not exist");
		} finally {
			if (fileSc != null) {
				fileSc.close();
			}
		}
		return wordsList;
	}

	/**
	 * This method isInputFileValid( ) validates the input file and returns 'true'
	 * if valid else it will return 'false'
	 * 
	 * @param file input file
	 * @return boolean true/false based on the files validity
	 */
	private final boolean isInputFileValid(File file) {
		if (!file.exists()) {
			return false; // file does not exist.
		} else if (!file.canRead()) {
			return false; // No permission to read file.
		} else if (file.length() == 0) {
			return false; // empty file.
		} else {
			return true; // If file is valid.
		}
	}

	/**
	 * This method takes a List<String> of words and iterates it to populate a
	 * Map<String, ArrayList<String>>
	 * 
	 * while iterating the list on its index, index and index+1 element will be used
	 * as key in the map and index+2 will be added to the list in the value of the
	 * map if present else it will create a new List add the index+2 element to the
	 * list and set it as the value for the key.
	 * 
	 * @param wordsList : List<String> of words, should have atleast 3 elements.
	 * @return Map<String, ArrayList<String>>
	 */
	public final Map<String, ArrayList<String>> populateTrigrams(List<String> wordsList) {
		if (wordsList == null) {
			throw new NullPointerException("list is null, Please check again!");
		}
		if (wordsList.size() < 3) {
			throw new IllegalArgumentException("Minimum 3 elements required to generate Triagram");
		}
		Map<String, ArrayList<String>> trigramMap = new HashMap<String, ArrayList<String>>();
		int lastSet = wordsList.size() - 3;
		for (int i = 0; i <= lastSet; i++) {
			String key = wordsList.get(i) + " " + wordsList.get(i + 1);
			String value = wordsList.get(i + 2);
			if (trigramMap.containsKey(key)) {
				trigramMap.get(key).add(value);
			} else {
				ArrayList<String> trigramList = new ArrayList<String>();
				trigramList.add(value);
				trigramMap.put(key, trigramList);
			}
		}
		return trigramMap;
	}

	/**
	 * 
	 * This methods initiates the Log
	 */

	public void logStarter() {

		// Instantiating the file handler for logging
		FileHandler handler;
		try {
			handler = new FileHandler("TrigramsBookGenerator.log", true);

			LOGGER.info("Logger Name: " + LOGGER.getName());
			LOGGER.addHandler(handler);

			// Read the configuration file for input properties.
			InputStream input = new FileInputStream("config.properties");
			Properties prop = new Properties();
			// load the properties file
			prop.load(input);
			LOGGER.info("List of Configurable Parameters:");
			LOGGER.info("inputFileName: " + prop.getProperty("inputFileName"));
			LOGGER.info("outputFileName: " + prop.getProperty("outputFileName"));
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Displays Trigram in the log Info
	 * 
	 * @param Map<String, ArrayList<String>> trigramMap
	 */
	public void trigramDisplay(Map<String, ArrayList<String>> trigramMap) {
		// Get a set of the entries
		Set<Entry<String, ArrayList<String>>> set = trigramMap.entrySet();
		// Get an iterator
		Iterator<Entry<String, ArrayList<String>>> i = set.iterator();
		// Iterating through elements
		while (i.hasNext()) {
			@SuppressWarnings("rawtypes")
			Map.Entry me = (Map.Entry) i.next();
			LOGGER.info(me.getKey() + "\t" + "=> " + me.getValue());
		}
	}

}